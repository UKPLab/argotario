/** The EventStore is a service that lets you save arbitrary events within the game. */

// Registration
kEventOpenedRegistration            = "OpenedRegistration";
kEventSuccessfulRegistration        = "SuccessfulRegistration";
kEventAbortedRegistration           = "AbortedRegistration";
kEventFailedRegistration            = "FailedRegistration";
kEventSkippedRegistration           = "SkippedRegistration";

// Authentication
kEventOpenedAuthentication          = "OpenedAuthentication";
kEventSuccessfulAuthentication      = "SuccessfulAuthentication";
kEventAbortedAuthentication         = "AbortedAuthentication";
kEventFailedAuthentication          = "FailedAuthentication";

// App
kEventOpenedApp                     = "OpenedApp";
kEventQuitApp                       = "QuitApp";

// Worlds
kEventOpenedWorld                   = "OpenedWorld"; // Fired whenever the user SWITCHES to another world
kEventQuitWorld                     = "QuitWorld"; // Not used yet
kEventFinishedWorld                 = "FinishedWorld";

// Levels
kEventOpenedLevel                   = "OpenedLevel";
kEventQuitLevel                     = "QuitLevel"; // Not finished
kEventFinishedLevel                 = "FinishedLevel";
kEventRepeatedLevel                 = "RepeatedLevel";

// Rounds
kEventOpenedRound                   = "OpenedRound";
kEventQuitRound                     = "QuitRound"; // Not finished
kEventFinishedRound                 = "FinishedRound"; // Has already submitted response data
kEventRoundDuration                 = "RoundDuration"; // Has just submitted response data
kEventSkippedRound                  = "SkippedRound"; // Fired even when the skipping is not completed

// Navigation & Actions
kEventOpenedUserProfile             = "OpenedUserProfile";
kEventOpenedForeignProfile          = "OpenedForeignProfile";
kEventOpenedAccount                 = "OpenedAccount";
//kEventOpenedHighscore               = "OpenedHighscore"; Not used yet
kEventUsedUserSearch                = "UsedUserSearch";
kEventFollowedUser                  = "FollowedUser";
kEventUnfollowedUser                = "UnfollowedUser";
kEventOpenedChooseAvatar            = "OpenedChooseAvatar";

// Misc
kEventTwerk                         = "Twerk";

var ignoreEventsByAdministrators    = true;
var ignoredEvents = [];//[kEventOpenedRound, kEventFinishedRound];
var trackingProbability             = 0.5;

angular.module('arg.services').provider('EventStore', function() {

    var sessionId = null;
    var doTrack = null;

    this.$get = function($http,$q,$rootScope,UserAccount) { return {

        /*
        */
        storeEvent: function(name, data) {
            if (sessionId==null) {
                sessionId = new Date()-0;
            }
            if (doTrack===null) {
                var rand = Math.random();
                console.log("Prob: ", rand);
                doTrack = rand <= trackingProbability;
            }
            var isStudyParticipant = UserAccount.property('studyParticipant') === true;
            if (!doTrack && !isStudyParticipant)
                return;

            // Do not store events generated by administrator users
            var roles = valueForKeyPath(BaasBox.getCurrentUser(), 'roles');
            if (ignoreEventsByAdministrators && roles && roles.indexOf('administrator')!=-1)
                return;

            if (ignoredEvents.indexOf(name)!=-1)
                return;

            return $q(function (resolve,reject) {
                var event = {
                    name: name || 'generic',
                    data: data || {},
                    timestamp: new Date()-0,
                    sessionId: sessionId
                };

                if (UserAccount.authenticated()) {
                    BaasBox.save( preparedForSaving(event), kCollectionEvents).done(function (result) {
                        resolve(result.data);
                        console.log("Stored event",event);
                    }).fail(function (error) {
                        reject({success: false, error: error});
                    });
                } else {
                    BaasBox.callPlugin('get','events/storeEvent',event).done(function (result) {
                        resolve(result.data);
                    }).fail(function (error) {
                        reject({success: false, error: error});
                    });
                }
            });
        }

    }}
});
